# Kalles Fraktaler 2
# Copyright (C) 2013-2017 Karl Runmo
# Copyright (C) 2017-2018 Claude Heiland-Allen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# make SYSTEM=64 for 64bit
# make SYSTEM=32 for 32bit (experimental)
SYSTEM ?= 64
include $(SYSTEM).mk

FLAGS := -Wall -Wextra -Wno-missing-field-initializers -pipe -MMD -g -O3 -ffast-math -I$(WINPREFIX)/include
# -I$(CLEWPREFIX)/include -Dclew_STATIC -DKF_OPENCL
COMPILE_FLAGS := -xc++ -std=c++17 $(FLAGS)
LINK_FLAGS := -static-libgcc -static-libstdc++ -Wl,--stack,67108864 -Wl,-subsystem,windows -L$(WINPREFIX)/lib -ffast-math
LIBS := -lgdi32 -lcomdlg32 -lole32 -loleaut32 -lcomctl32 -luuid -lmpfr -lgmp -ljpeg $(WINPREFIX)/lib/libpng16.a -lz -lgsl -lgslcblas

FRAKTAL_SOURCES_CPP = \
fraktal_sft/CDecNumber.cpp \
fraktal_sft/CFixedFloat.cpp \
fraktal_sft/cmdline.cpp \
fraktal_sft/double_perturbation.cpp \
fraktal_sft/double_reference.cpp \
fraktal_sft/floatexp_approximation.cpp \
fraktal_sft/floatexp_perturbation.cpp \
fraktal_sft/floatexp_reference.cpp \
fraktal_sft/fraktal_sft.cpp \
fraktal_sft/gradient.cpp \
fraktal_sft/jpeg.cpp \
fraktal_sft/listbox.cpp \
fraktal_sft/long_double_perturbation.cpp \
fraktal_sft/long_double_reference.cpp \
fraktal_sft/main.cpp \
fraktal_sft/main_color.cpp \
fraktal_sft/main_examine.cpp \
fraktal_sft/main_iterations.cpp \
fraktal_sft/main_position.cpp \
fraktal_sft/newton.cpp \
fraktal_sft/Parameter.cpp \
fraktal_sft/png.cpp \
fraktal_sft/render.cpp \
fraktal_sft/Settings.cpp

FRAKTAL_SOURCES_H = \
fraktal_sft/CDecNumber.h \
fraktal_sft/CFixedFloat.h \
fraktal_sft/cmdline.h \
fraktal_sft/colour.h \
fraktal_sft/complex.h \
fraktal_sft/floatexp.h \
fraktal_sft/fraktal_sft.h \
fraktal_sft/gradient.h \
fraktal_sft/jpeg.h \
fraktal_sft/listbox.h \
fraktal_sft/main.h \
fraktal_sft/main_color.h \
fraktal_sft/main_examine.h \
fraktal_sft/main_iterations.h \
fraktal_sft/main_position.h \
fraktal_sft/newton.h \
fraktal_sft/png.h \
fraktal_sft/resource.h \
fraktal_sft/Settings.h

COMMON_SOURCES_CPP = \
common/FolderBrowser.cpp \
common/getimage.cpp \
common/parallell.cpp \
common/StringVector.cpp \
common/tooltip.cpp \
common/bitmap.cpp

COMMON_SOURCES_H = \
common/FolderBrowser.h \
common/getimage.h \
common/parallell.h \
common/StringVector.h \
common/tooltip.h \
common/bitmap.h

FORMULA_SOURCES_CPP = formula/formula.cpp

OPENCL_SOURCES_CPP =
OPENCL_SOURCES_C =
#OPENCL_SOURCES_CPP = cl/opencl.cpp
#OPENCL_SOURCES_C = cl/kf_opencl_source.c $(CLEWPREFIX)/src/clew.c

SOURCES_CPP = $(FRAKTAL_SOURCES_CPP) $(COMMON_SOURCES_CPP) $(FORMULA_SOURCES_CPP) $(OPENCL_SOURCES_CPP)
SOURCES_C = $(OPENCL_SOURCES_C)
SOURCES_H = $(FRAKTAL_SOURCES_H) $(COMMON_SOURCES_H) cl/opencl.h $(CLEWPREFIX)/include/clew.h

SOURCES = $(SOURCES_CPP) $(SOURCES_C) $(SOURCES_H)

OBJECTS_CPP := $(patsubst %.cpp,%.o,$(SOURCES_CPP))
OBJECTS_C := $(patsubst %.c,%.o,$(SOURCES_C))
OBJECTS := $(OBJECTS_CPP) $(OBJECTS_C) res.o

DEPENDS := $(patsubst %.o,%.d,$(OBJECTS))

all: kf.exe

clean:
	rm -f $(OBJECTS) $(DEPENDS) $(FORMULA_SOURCES_CPP)
	rm -f cl/kf_opencl_source.c cl/kf_opencl_source.d cl/kf_opencl_source.o cl/kf.cl cl/opencl.d cl/opencl.inc cl/opencl.o
	rm -f preprocessor preprocessor.hi preprocessor.o

kf.exe: $(OBJECTS)
	$(LINK) -o kf.exe $(OBJECTS) $(LINK_FLAGS) $(LIBS)

res.o: fraktal_sft/fraktal_sft.rc
	$(WINDRES) -i fraktal_sft/fraktal_sft.rc -o res.o

%.o: %.cpp
	$(COMPILE) $(COMPILE_FLAGS) -o $@ -c $<

%.o: %.c
	$(COMPILE) $(COMPILE_FLAGS) -o $@ -c $<

formula/formula.cpp: formula/common.cpp formula/formula.xsl formula/formula.xml preprocessor
	( echo "/* this file is autogenerated, do not edit directly */" ; cat formula/common.cpp ; $(XSLTPROC) formula/formula.xsl formula/formula.xml | ./preprocessor ) > $@

cl/kf_opencl_source.c: cl/kf.cl cl/s2c.sh
	./cl/s2c.sh kf_opencl_source < cl/kf.cl > cl/kf_opencl_source.c

cl/kf.cl: cl/common.cl cl/formula.xsl formula/formula.xml preprocessor
	( cat cl/common.cl ; $(XSLTPROC) cl/formula.xsl formula/formula.xml | ./preprocessor ) > $@

preprocessor: preprocessor.hs
	ghc -O preprocessor.hs

cl/opencl.inc: cl/opencl.xsl formula/formula.xml
	$(XSLTPROC) -o $@ cl/opencl.xsl formula/formula.xml

cl/opencl.o: cl/opencl.cpp cl/opencl.h cl/opencl.inc

README.pdf: README.md
	pandoc -f markdown -t latex -V "papersize=a4" -V "geometry=margin=1in" < README.md -o README.pdf

-include $(DEPENDS)
