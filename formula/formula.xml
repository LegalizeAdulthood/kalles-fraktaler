<?xml version="1.0" encoding="UTF-8"?>
<formulas>
  <group type="0" name="Mandelbrot">

    <formula power="2" glitch="0.0000001">
      <reference t="R">
        Xrn = Xr2 - Xi2 + Cr;
        Xin = (Xr + Xi).Square() - Xr2 - Xi2 + Ci;
      </reference>
      <perturbation t="R">
        xrn = (2 * Xr + xr) * xr - (2 * Xi + xi) * xi + cr;
        xin = 2 * ((Xr + xr) * xi + Xi * xr) + ci;
      </perturbation>
    </formula>

    <formula power="3" glitch="0.000001">
      <reference t="R">
        Xrn = Xr*(Xr2 - 3 * Xi2) + Cr;
        Xin = (3 * Xr2 - Xi2)*Xi + Ci;
      </reference>
      <perturbation t="R">
        xrn = 3 * Xr * Xr * xr - 6 * Xr * Xi * xi - 3 * Xi * Xi * xr + 3 * Xr * xr * xr - 3 * Xr * xi * xi - 3 * Xi * 2 * xr * xi + xr * xr * xr - 3 * xr * xi * xi + cr;
        xin = 3 * Xr * Xr * xi + 6 * Xr * Xi * xr - 3 * Xi * Xi * xi + 3 * Xr * 2 * xr * xi + 3 * Xi * xr * xr - 3 * Xi * xi * xi + 3 * xr * xr * xi - xi * xi * xi + ci;
      </perturbation>
    </formula>

    <formula power="4" glitch="0.00001">
      <reference t="R">
        Xrn = Xr2.Square() - 6 * Xr2 * Xi2 + Xi2.Square() + Cr;
        Xin = 4 * Xr * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="C">
        xn = 4 * (X ^ 3) * x + 6 * (X ^ 2) * (x ^ 2) + 4 * X * (x ^ 3) + (x ^ 4) + c;
      </perturbation>
    </formula>

    <formula power="5" glitch="0.0001">
      <reference t="C">
        Xn = (X ^ 5) + C;
      </reference>
      <perturbation t="C">
        xn = 5 * (X ^ 4) * x + 10 * (X ^ 3) * (x ^ 2) + 10 * (X ^ 2) * (x ^ 3) + 5 * X * (x ^ 4) + (x ^ 5) + c;
      </perturbation>
    </formula>

    <formula power="6" glitch="0.0001">
      <reference t="C">
        Xn = (X ^ 6) + C;
      </reference>
      <perturbation t="C">
        xn = 6 * (X ^ 5) * x + 15 * (X ^ 4) * (x ^ 2) + 20 * (X ^ 3) * (x ^ 3) + 15 * (X ^ 2) * (x ^ 4) + 6 * X * (x ^ 5) + (x ^ 6) + c;
      </perturbation>
    </formula>

    <formula power="7" glitch="0.001">
      <reference t="C">
        Xn = (X ^ 7) + C;
      </reference>
      <perturbation t="C">
        xn = 7 * (X ^ 6) * x + 21 * (X ^ 5) * (x ^ 2) + 35 * (X ^ 4) * (x ^ 3) + 35 * (X ^ 3) * (x ^ 4) + 21 * (X ^ 2) * (x ^ 5) + 7 * X * (x ^ 6) + (x ^ 7) + c;
      </perturbation>
    </formula>

    <formula power="8" glitch="0.001">
      <reference t="C">
        Xn = (X ^ 8) + C;
      </reference>
      <perturbation t="C">
        xn = 8 * (X ^ 7) * x + 28 * (X ^ 6) * (x ^ 2) + 56 * (X ^ 5) * (x ^ 3) + 70 * (X ^ 4) * (x ^ 4) + 56 * (X ^ 3) * (x ^ 5) + 28 * (X ^ 2) * (x ^ 6) + 8 * X * (x ^ 7) + (x ^ 8) + c;
      </perturbation>
    </formula>

    <formula power="9" glitch="0.01">
      <reference t="C">
        Xn = (X ^ 9) + C;
      </reference>
      <perturbation t="C">
        xn = 9 * (X ^ 8) * x + 36 * (X ^ 7) * (x ^ 2) + 84 * (X ^ 6) * (x ^ 3) + 126 * (X ^ 5) * (x ^ 4) + 126 * (X ^ 4) * (x ^ 5) + 84 * (X ^ 3) * (x ^ 6) + 36 * (X ^ 2) * (x ^ 7) + 9 * X * (x ^ 8) + (x ^ 9) + c;
      </perturbation>
    </formula>

    <formula power="10" glitch="0.01">
      <reference t="C">
        Xn = (X ^ 10) + C;
      </reference>
      <perturbation t="C">
        xn = 10 * (X ^ 9) * x + 45 * (X ^ 8) * (x ^ 2) + 120 * (X ^ 7) * (x ^ 3) + 210 * (X ^ 6) * (x ^ 4) + 252 * (X ^ 5) * (x ^ 5) + 210 * (X ^ 4) * (x ^ 6) + 120 * (X ^ 3) * (x ^ 7) + 45 * (X ^ 2) * (x ^ 8) + 10 * X * (x ^ 9) + (x ^ 10) + c;
      </perturbation>
    </formula>

  </group>
  <group type="1" name="Burning Ship">

    <formula power="2" glitch="0.0000001">
      <reference t="R">
        Xrn = Xr2 - Xi2 + Cr;
        Xin = (2 * Xr * Xi).Abs() + Ci;
      </reference>
      <perturbation t="R">
        xrn = 2 * xr * Xr + xr * xr - 2 * Xi * xi - xi * xi + cr;
        xin = 2 * diffabs(Xr * Xi, Xr * xi + xr * Xi + xr * xi) + ci;
      </perturbation>
    </formula>

    <formula power="3" glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - 3 * Xi2) * Xr.Abs() + Cr;
        Xin = (3 * Xr2 - Xi2) * Xi.Abs() + Ci;
      </reference>
      <perturbation t="R">
        xrn = (Xr * Xr - 3 * Xi * Xi) * diffabs(Xr, xr) + (2 * Xr * xr + xr * xr - 6 * Xi * xi - 3 * xi * xi) * abs(Xr + xr) + cr;
        xin = (3 * Xr * Xr - Xi * Xi) * diffabs(Xi, xi) + (6 * Xr * xr + 3 * xr * xr - 2 * Xi * xi - xi * xi) * abs(Xi + xi) + ci;
      </perturbation>
    </formula>
#
   <formula power="4" glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 + Cr;
        Xin = 4 * (Xr * Xi).Abs() * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
        xrn = 4*Xr*Xr*Xr*xr + 6*Xr*Xr*xr*xr + 4*Xr*xr*xr*xr + xr*xr*xr*xr + 4*Xi*Xi*Xi*xi + 6*Xi*Xi*xi*xi + 4*Xi*xi*xi*xi + xi*xi*xi*xi - 12*Xr*Xr*Xi*xi-6*Xr*Xr*xi*xi-12*Xr*xr*Xi*Xi-24*Xr*xr*Xi*xi-12*Xr*xr*xi*xi-6*xr*xr*Xi*Xi-12*xr*xr*Xi*xi-6*xr*xr*xi*xi + cr;
        xin = 4*(Xr*Xr-Xi*Xi)*diffabs(Xr * Xi, Xr * xi + xr * Xi + xr * xi) + 4 * abs(Xr*Xi + Xr*xi + Xr*Xi + xr*xi)*(2*xr*Xr+xr*xr-2*xi*Xi-xi*xi) + ci;
      </perturbation>
    </formula>

    <formula power="5" glitch="0.0001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2 * Xr2 - 10 * Xr2 * Xi2 + 5 * Xi2 * Xi2) + Cr;
        Xin = Xi.Abs() * (5 * Xr2 * Xr2 - 10 * Xr2 * Xi2 + Xi2 * Xi2) + Ci;
      </reference>
      <perturbation t="R">
        xrn = diffabs(Xr, xr) * (Xr*Xr*Xr*Xr - 10*Xr*Xr*Xi*Xi + 5*Xi*Xi*Xi*Xi) + abs(Xr+xr) * (4*Xr*Xr*Xr*xr+6*Xr*Xr*xr*xr+4*Xr*xr*xr*xr+xr*xr*xr*xr -20*Xr*Xr*Xi*xi-10*Xr*Xr*xi*xi-20*Xr*xr*Xi*Xi-40*Xr*xr*Xi*xi-20*Xr*xr*xi*xi-10*xr*xr*Xi*Xi-20*xr*xr*Xi*xi-10*xr*xr*xi*xi + 20*Xi*Xi*Xi*xi+30*Xi*Xi*xi*xi+20*Xi*xi*xi*xi+5*xi*xi*xi*xi) + cr;
        xin = diffabs(Xi, xi) * (5*Xr*Xr*Xr*Xr - 10*Xr*Xr*Xi*Xi + Xi*Xi*Xi*Xi) + abs(Xi+xi) * (20*Xr*Xr*Xr*xr+30*Xr*Xr*xr*xr+20*Xr*xr*xr*xr+5*xr*xr*xr*xr - 20*Xr*Xr*Xi*xi-10*Xr*Xr*xi*xi-20*Xr*xr*Xi*Xi-40*Xr*xr*Xi*xi-20*Xr*xr*xi*xi-10*xr*xr*Xi*Xi-20*xr*xr*Xi*xi-10*xr*xr*xi*xi +4*Xi*Xi*Xi*xi+6*Xi*Xi*xi*xi+4*Xi*xi*xi*xi+xi*xi*xi*xi) + ci;
      </perturbation>
    </formula>

  </group>
  <group type="2" name="Buffalo">

    <formula power="2" glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2).Abs() + Cr;
        Xin = -2.0 * (Xr * Xi).Abs() + Ci;
      </reference>
      <perturbation t="R">
        xrn = diffabs(Xr * Xr - Xi * Xi, 2 * Xr * xr + xr * xr - 2 * Xi * xi - xi * xi) + cr;
        xin = ci - 2 * diffabs(Xr * Xi, Xr * xi + xr * Xi + xr * xi);
      </perturbation>
    </formula>

    <formula power="3" glitch="0.0000001">
      <reference t="R">
        Xrn = ((Xr2 - Xi2 * 3) * Xr).Abs() + Cr;
        Xin = ((Xr2 * 3 - Xi2) * Xi).Abs() + Ci;
      </reference>
      <perturbation t="R">
        xrn = diffabs(Xr * (Xr * Xr - 3 * Xi * Xi), xr * (3 * Xr * Xr + xr * xr) + 3 * Xr * (xr  * xr - 2 * Xi * xi - xi * xi) - 3 * xr * (Xi * Xi + 2 * Xi * xi + xi * xi)) + cr;
        xin = diffabs(Xi * (3 * Xr * Xr - Xi * Xi), 3 * Xi * (2 * Xr * xr + xr * xr - xi * xi) + 3 * xi * (Xr * Xr + 2 * Xr * xr + xr * xr) - xi * (3 * Xi * Xi + xi * xi)) + ci;
      </perturbation>
    </formula>

    <formula power="4" glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() + Cr;
        Xin = (4 * Xr * Xi * (Xr2 - Xi2)).Abs() + Ci;
      </reference>
      <perturbation t="R">
        T x(Xr), y(Xi), x2(x * x), y2(y * y), a(xr), b(xi), a2(a * a), b2(b * b);
        xrn = diffabs(x2*x2+y2*y2-6*x2*y2, 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2) + cr;
        xin = diffabs(4*x2*x*y-4*x*y2*y, -4*a*y2*y-12*b*x*y2-12*a*b*y2+12*a*x2*y-12*b2*x*y+12*a2*x*y-12*a*b2*y+4*a2*a*y+4*b*x2*x+12*a*b*x2-4*b2*b*x+12*a2*b*x-4*a*b2*b+4*a2*a*b) + ci;
      </perturbation>
    </formula>

    <formula power="5" glitch="0.0001">
      <reference t="R">
        Xrn = (Xr * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2)).Abs() + Cr;
        Xin = (Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2)).Abs() + Ci;
      </reference>
      <perturbation t="R">
        T x(Xr), y(Xi), x2(x * x), y2(y * y), a(xr), b(xi), a2(a * a), b2(b * b);
        xrn = diffabs(5*x*y2*y2-10*x2*x*y2+x2*x2*x, 20*x*b*y2*y-30*x2*a*y2+30*x*b2*y2-30*x*a2*y2-20*x2*x*b*y-60*x2*a*b*y+20*x*b2*b*y-60*x*a2*b*y+5*x2*x2*a-10*x2*x*b2+10*x2*x*a2-30*x2*a*b2+10*x2*a2*a+5*x*b2*b2-30*x*a2*b2+5*x*a2*a2+5*a*y2*y2+20*a*b*y2*y+30*a*b2*y2-10*a2*a*y2+20*a*b2*b*y-20*a2*a*b*y+5*a*b2*b2-10*a2*a*b2+a2*a2*a) + cr;
        xin = diffabs(y2*y2*y-10*y2*y*x2+5*y*x2*x2, 5*y2*y2*b-20*y2*y*a*x+10*y2*y*b2-10*y2*y*a2-30*y2*b*x2-60*y2*a*b*x+10*y2*b2*b-30*y2*a2*b+20*y*a*x2*x-30*y*b2*x2+30*y*a2*x2-60*y*a*b2*x+20*y*a2*a*x+5*y*b2*b2-30*y*a2*b2+5*y*a2*a2+5*b*x2*x2+20*b*a*x2*x-10*b2*b*x2+30*b*a2*x2-20*b2*b*a*x+20*b*a2*a*x+b2*b2*b-10*b2*b*a2+5*b*a2*a2) + ci;
      </perturbation>
    </formula>

  </group>
  <group type="3" name="Celtic">

    <formula power="2" glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2).Abs() + Cr;
        Xin = Xr * Xi * 2.0 + Ci;
      </reference>
      <perturbation t="R">
        xrn = diffabs(Xr * Xr - Xi * Xi, (2 * Xr + xr) * xr - (2 * Xi + xi) * xi) + cr;
        xin = 2 * Xr * xi + 2 * xr * (Xi + xi) + ci;
      </perturbation>
    </formula>

    <formula power="3" glitch="0.0000001">
      <reference t="R">
        Xrn = ((Xr2 - (Xi2 * 3)) * Xr).Abs() + Cr;
        Xin = ((Xr2 * 3) - Xi2) * Xi + Ci;
      </reference>
      <perturbation t="R">
        xrn = diffabs(Xr*(Xr2 - 3 * Xi2), xr*(3 * Xr2 + xr2) + 3 * Xr*(xr2 - 2 * Xi*xi - xi2) - 3 * xr*(Xi2 + 2 * Xi*xi + xi2)) + cr;
				xin = 3 * Xi*(2 * Xr*xr + xr2 - xi2) + 3 * xi*(Xr2 + 2 * Xr*xr + xr2) - xi*(xi2 + 3 * Xi2) + ci;
      </perturbation>
    </formula>

    <formula power="4" glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xr * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			else if (m_nFractalType == 3 && m_nPower == 4){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						double c = x2*x2+y2*y2-6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 -12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr+=a0;
						

						Dni = 12*x2*y*a+12*x*y*a2-12*x*y2*b-12*x*y*b2+4*x2*x*b+12*x2*b*a+12*x*b*a2-4*x*b2*b+4*a2*a*y-4*a*y2*y-12*a*y2*b-12*a*y*b2+4*a2*a*b-4*a*b2*b + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

    <formula power="5" glitch="0.0001">
      <reference t="R">
        Xrn = (Xr * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2)).Abs() +Cr;
        Xin = Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2) +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			else if (m_nFractalType == 3 && m_nPower == 5){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//Dnr = _abs((x+a) * ((x+a)*(x+a)*(x+a)*(x+a) - 10 * (x+a)*(x+a)*(y+b)*(y+b) + 5 * (y+b)*(y+b)*(y+b)*(y+b))) - _abs(x2*x2*x - 10*x2*x*y2 + 5*x*y2*y2) +a0;
						//Dnr = _abs(5*x*y2*y2+20*x*b*y2*y-10*x2*x*y2-30*x2*a*y2+30*x*b2*y2-30*x*a2*y2-20*x2*x*b*y-60*x2*a*b*y+20*x*b2*b*y-60*x*a2*b*y+x2*x2*x+5*x2*x2*a-10*x2*x*b2+10*x2*x*a2-30*x2*a*b2+10*x2*a2*a+5*x*b2*b2-30*x*a2*b2+5*x*a2*a2+5*a*y2*y2+20*a*b*y2*y+30*a*b2*y2-10*a2*a*y2+20*a*b2*b*y-20*a2*a*b*y+5*a*b2*b2-10*a2*a*b2+a2*a2*a) - _abs(x2*x2*x - 10*x2*x*y2 + 5*x*y2*y2) + a0;
						double c = x2*x2*x - 10*x2*x*y2 + 5*x*y2*y2;
						double d = 20*x*b*y2*y-30*x2*a*y2+30*x*b2*y2-30*x*a2*y2-20*x2*x*b*y-60*x2*a*b*y+20*x*b2*b*y-60*x*a2*b*y+5*x2*x2*a-10*x2*x*b2+10*x2*x*a2-30*x2*a*b2+10*x2*a2*a+5*x*b2*b2-30*x*a2*b2+5*x*a2*a2+5*a*y2*y2+20*a*b*y2*y+30*a*b2*y2-10*a2*a*y2+20*a*b2*b*y-20*a2*a*b*y+5*a*b2*b2-10*a2*a*b2+a2*a2*a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr+=a0;
						
						Dni = 20*y*x2*x*a+30*y*x2*a2+20*y*x*a2*a+5*y*a2*a2-30*y2*x2*b-30*y*x2*b2-20*y2*y*x*a-60*y2*x*a*b-60*y*x*a*b2-10*y2*y*a2-30*y2*a2*b-30*y*a2*b2+5*y2*y2*b+10*y2*y*b2+10*y2*b2*b+5*y*b2*b2+5*b*x2*x2+20*b*x2*x*a+30*b*x2*a2+20*b*x*a2*a+5*b*a2*a2-10*b2*b*x2-20*b2*b*x*a-10*b2*b*a2+b2*b2*b +b0;
						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

  </group>
  <group type="4" name="Mandelbar">

    <formula power="2" glitch="0.0000001">
      <reference t="R">
        Xrn = Xr2 - Xi2 + Cr;
        Xin = Ci - Xr*Xi*2;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			else if (m_nFractalType == 4 && m_nPower == 2){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						Dnr = 2 * r*a + a2 - b2 - 2 * b*i + a0;
						Dni = (r*b + a*i + a*b)*-2 + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

    <formula power="3" glitch="0.0000001">
      <reference t="R">
        Xrn = -(Xr2 - Xi2 * 3) * Xr + Cr;
        Xin = (Xr2 * 3 - Xi2) * Xi + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			else if (m_nFractalType == 4 && m_nPower == 3){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = a0 - a*(3 * r2 + a2) + 3 * r*(b2 + 2 * i*b - a2) + 3 * a*(i2 + 2 * i*b + b2);
						Dni = 6 * r*i*a + 3 * i*a2 - 3 * i2*b - 3 * i*b2 + 3 * r2*b + 6 * r*a*b + 3 * a2*b - b2*b + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

    <formula power="4" glitch="0.00001">
      <reference t="R">
        Xin = -4 * Xr * Xi * (Xr2 - Xi2) + Ci;
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Power Mandelbar
			else if (m_nFractalType == 4 && m_nPower == 4){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;
						Dni = -12*x2*y*a-12*x*y*a2+12*x*y2*b+12*x*y*b2-4*x2*x*b-12*x2*b*a-12*x*b*a2+4*x*b2*b-4*a2*a*y+4*a*y2*y+12*a*y2*b+12*a*y*b2-4*a2*a*b+4*a*b2*b + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

    <formula power="5" glitch="0.0001">
      <reference t="R">
        Xrn = Xr * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = -Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2) +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 5th Power Mandelbar
			else if (m_nFractalType == 4 && m_nPower == 5){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 5*x2*x2*a+10*x2*x*a2+10*x2*a2*a+5*x*a2*a2-20*x2*x*y*b-10*x2*x*b2-30*x2*a*y2-60*x2*a*y*b-30*x2*a*b2-30*x*a2*y2-60*x*a2*y*b-30*x*a2*b2+20*x*y2*y*b+30*x*y2*b2+20*x*y*b2*b+5*x*b2*b2+a2*a2*a-10*a2*a*y2-20*a2*a*y*b-10*a2*a*b2+5*a*y2*y2+20*a*y2*y*b+30*a*y2*b2+20*a*y*b2*b+5*a*b2*b2 + a0;
						Dni = -20*y*x2*x*a-30*y*x2*a2-20*y*x*a2*a-5*y*a2*a2+30*y2*x2*b+30*y*x2*b2+20*y2*y*x*a+60*y2*x*a*b+60*y*x*a*b2+10*y2*y*a2+30*y2*a2*b+30*y*a2*b2-5*y2*y2*b-10*y2*y*b2-10*y2*b2*b-5*y*b2*b2-5*b*x2*x2-20*b*x2*x*a-30*b*x2*a2-20*b*x*a2*a-5*b*a2*a2+10*b2*b*x2+20*b2*b*x*a+10*b2*b*a2-b2*b2*b + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>

  </group>
  <group type="5" name="Mandelbar Celtic">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2).Abs() + Cr;
        Xin = Ci - Xr*Xi*2.0;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//Mandelbar Celtic
			else if (m_nFractalType == 5){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						double c = r*r - i*i;
						double d = 2 * r*a + a2 - 2 * i*b - b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						Dni = (r*b + a*i + a*b)*-2 + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="6" name="Perpendicular Mandelbrot">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = Xr2 - Xi2 + Cr;
        Xin = Ci - Xr.Abs()*Xi*2.0;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Perpendicular Mandelbrot
			else if (m_nFractalType == 6){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						Dnr = 2 * r*a + a2 - b2 - 2 * b*i + a0;

						double c = r;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs((r + a))*b*-2 + Dni*i*-2 + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="7" name="Perpendicular Burning Ship">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = Xr2 - Xi2 + Cr;
        Xin = Ci - Xr*Xi.Abs()*2.0;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//Perpendicular Burning Ship
			else if (m_nFractalType == 7){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						Dnr = 2 * r*a + a2 - b2 - 2 * b*i + a0;

						double c = i;
						double d = b;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = Dni*r*-2 + a*_abs((i + b))*-2 + b0;


						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="8" name="Perpendicular Celtic">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2).Abs() + Cr;
        Xin = Ci - Xr.Abs()*Xi*2.0;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//Perpendicular Celtic
			else if (m_nFractalType == 8){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						double c = r*r - i*i;
						double d = 2 * r*a + a2 - 2 * i*b - b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						c = r;
						d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs((r + a))*b*-2 + Dni*i*-2 + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="9" name="Perpendicular Buffalo">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2).Abs() + Cr;
        Xin = Ci - Xr*Xi.Abs()*2.0;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//Perpendicular Buffalo
			else if (m_nFractalType == 9){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double a2 = a*a;
						double b2 = b*b;
						double &a0 = dbD0r;
						double &b0 = dbD0i;

						double c = r*r - i*i;
						double d = 2 * r*a + a2 - 2 * i*b - b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						c = i;
						d = b;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = Dni*r*-2 + a*_abs((i + b))*-2 + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="10" name="Cubic Quasi Burning Ship">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - (Xi2 * 3)) * Xr.Abs() + Cr;
        Xin = -(((Xr2 * 3.0) - Xi2) * Xi).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Cubic Quasi Burning Ship
			else if (m_nFractalType == 10){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;
						double ar = a*r;
						double ib = i*b;
						double ab;

						if (r>0){
							if (r + a>0)
								Dnr = a;
							else if (a == -r)
								Dnr = a;
							else if (a<-r)
								Dnr = -a - 2 * r;
						}
						else if (r == 0)
							Dnr = _abs(a);
						else if (r < 0){
							if (r + a>0)
								Dnr = a + 2 * r;
							else if (a == -r)
								Dnr = -a;
							else if (a < -r)
								Dnr = -a;
						}
						ab = r + a;
						Dnr = (r2 - 3 * i2) * Dnr + (2 * ar + a2 - 6 * ib - 3 * b2)*_abs(ab) + a0;

						double c = i*(3 * r2 - i2);
						double d = 3 * i*(2 * r*a + a2 - b2) + 3 * b*(r2 + 2 * r*a + a2) - b*(3 * i2 + b2);
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = b0 - Dni;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="11" name="Cubic Partial BS Real">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - (Xi2 * 3)) * Xr.Abs() + Cr;
        Xin = (Xr2 * 3 - Xi2) * Xi + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Cubic Partial BS Real
			else if (m_nFractalType == 11){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;
						double ar = a*r;
						double ib = i*b;
						double ab;

						if (r>0){
							if (r + a>0)
								Dnr = a;
							else if (a == -r)
								Dnr = a;
							else if (a<-r)
								Dnr = -a - 2 * r;
						}
						else if (r == 0)
							Dnr = _abs(a);
						else if (r < 0){
							if (r + a>0)
								Dnr = a + 2 * r;
							else if (a == -r)
								Dnr = -a;
							else if (a < -r)
								Dnr = -a;
						}
						ab = r + a;
						Dnr = (r2 - 3 * i2) * Dnr + (2 * ar + a2 - 6 * ib - 3 * b2)*_abs(ab) + a0;
						Dni = 6 * r*(i*a + a*b) + 3 * i*(a2 - b2) + 3 * b*(r2 - i2) + b*(3 * a2 - b2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="12" name="Cubic Partial BS Imag">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2 * 3) * Xr + Cr;
        Xin = ((Xr2 * 3) - Xi2) * Xi.Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Cubic Partial BS Imag
			else if (m_nFractalType == 12){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;
						double ar = a*r;
						double ib = i*b;
						double ab;

						Dnr = 3 * r2*a + 3 * r*a2 - 6 * r*i*b - 3 * r*b2 + a*a2 - 3 * i2*a - 6 * i*a*b - 3 * a*b2 + a0;

						if (i>0){
							if (i + b>0)
								Dni = b;
							else if (b == -i)
								Dni = b;
							else if (b<-i)
								Dni = -b - 2 * i;
						}
						else if (i == 0)
							Dni = _abs(b);
						else if (i < 0){
							if (i + b>0)
								Dni = b + 2 * i;
							else if (b == -i)
								Dni = -b;
							else if (b < -i)
								Dni = -b;
						}
						ab = i + b;
						Dni = (3 * r2 - i2) * Dni + (6 * ar + 3 * a2 - 2 * ib - b2) * _abs(ab) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="13" name="Cubic Flying Squirrel (Buffalo Imag)">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2 * 3) * Xr + Cr;
        Xin = (((Xr2 * 3.0) - Xi2) * Xi).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Cubic Flying Squirrel
			else if (m_nFractalType == 13){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 3 * r2*a + 3 * r*a2 - 6 * r*i*b - 3 * r*b2 + a*a2 - 3 * i2*a - 6 * i*a*b - 3 * a*b2 + a0;

						double c = i*(3 * r2 - i2);
						double d = 3 * i*(2 * r*a + a2 - b2) + 3 * b*(r2 + 2 * r*a + a2) - b*(3 * i2 + b2);
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = Dni + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="14" name="Cubic Quasi Perpendicular">
    <formula glitch="0.0000001">
      <reference t="R">
        Xrn = (Xr2 - Xi2 * 3) * Xr.Abs() + Cr;
        Xin = Ci - (Xr2 * 3 - Xi2).Abs() * Xi;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// Cubic Quasi Perpendicular
			else if (m_nFractalType == 14){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &r = m_db_dxr[antal];
						double &i = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double r2 = r*r;
						double i2 = i*i;
						double a2 = a*a;
						double b2 = b*b;
						double ar = a*r;
						double ib = i*b;
						double ab;

						if (r>0){
							if (r + a>0)
								Dnr = a;
							else if (a == -r)
								Dnr = a;
							else if (a<-r)
								Dnr = -a - 2 * r;
						}
						else if (r == 0)
							Dnr = _abs(a);
						else if (r < 0){
							if (r + a>0)
								Dnr = a + 2 * r;
							else if (a == -r)
								Dnr = -a;
							else if (a < -r)
								Dnr = -a;
						}
						ab = r + a;
						Dnr = (r2 - 3 * i2) * Dnr + (2 * ar + a2 - 6 * ib - 3 * b2)*_abs(ab) + a0;

						double c = 3 * r2 - i2;
						double d = 6 * r*a + 3 * a2 - 2 * i*b - b2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						ab = 3 * r2 + 6 * r*a + 3 * a2 - i2 - 2 * i*b - b2;
						Dni = b0 - Dni*i - _abs(ab)*b;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="15" name="4th Burning Ship Partial Imag">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = 4 * Xr * Xi.Abs() * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Burning Ship Partial Imag
			else if (m_nFractalType == 15){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func1
						double c = y;
						double d = b;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(y+b)*(12*x2*a+12*x*a2+4*a2*a - 4*a*y2-8*b*x*y-8*a*b*y-4*b2*x-4*a*b2) + Dni*(4*x2*x - 4*x*y2) + b0;
						
						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="16" name="4th Burning Ship Partial Real">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = 4 * Xr.Abs() * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Burning Ship Partial Real
			else if (m_nFractalType == 16){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func3
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(x+a)*(4*x2*b+8*x*a*y+8*x*a*b+4*a2*y+4*a2*b - 12*b*y2-12*b2*y-4*b2*b) + Dni*(4*x2*y - 4*y2*y) + b0;
						
						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="17" name="4th Burning Ship Partial Real Mbar">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = -4 * Xr.Abs() * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Burning Ship Partial Real Mbar
			else if (m_nFractalType == 17){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func4
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(x+a)*(12*y2*b+12*y*b2+4*b2*b - 8*a*x*y-4*a2*y-4*b*x2-8*a*b*x-4*a2*b) + Dni*(4*y2*y - 4*x2*y) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="18" name="4th Celtic Burning Ship Partial Imag">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xr * Xi.Abs() * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic Burning Ship Partial Imag
			else if (m_nFractalType == 18){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						//func1
						c = y;
						d = b;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(y+b)*(12*x2*a+12*x*a2+4*a2*a - 4*a*y2-8*b*x*y-8*a*b*y-4*b2*x-4*a*b2) + Dni*(4*x2*x - 4*x*y2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="19" name="4th Celtic Burning Ship Partial Real">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xr.Abs() * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic Burning Ship Partial Real
			else if (m_nFractalType == 19){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						//func3
						c = x;
						d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(x+a)*(4*x2*b+8*x*a*y+8*x*a*b+4*a2*y+4*a2*b - 12*b*y2-12*b2*y-4*b2*b) + Dni*(4*x2*y - 4*y2*y) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="20" name="4th Celtic Burning Ship Partial Real Mbar">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = -4 * Xr.Abs() * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic Burning Ship Partial Real Mbar
			else if (m_nFractalType == 20){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						//func4
						c = x;
						d = a;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = _abs(x+a)*(12*y2*b+12*y*b2+4*b2*b - 8*a*x*y-4*a2*y-4*b*x2-8*a*b*x-4*a2*b) + Dni*(4*y2*y - 4*x2*y) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="21" name="4th Buffalo Partial Imag">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = (4 * Xr * Xi * (Xr2 - Xi2)).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Buffalo Partial Imag
			else if (m_nFractalType == 21){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;
						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func6
						double c = 4*x2*x*y-4*x*y2*y;
						double d = -4*a*y2*y-12*b*x*y2-12*a*b*y2+12*a*x2*y-12*b2*x*y+12*a2*x*y-12*a*b2*y+4*a2*a*y+4*b*x2*x+12*a*b*x2-4*b2*b*x+12*a2*b*x-4*a*b2*b+4*a2*a*b;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni=Dni+b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="22" name="4th Celtic Mbar">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = -4 * Xr * Xi * (Xr2 - Xi2) + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic Mbar
			else if (m_nFractalType == 22){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						//func8
						Dni = b0 - (12*x2*y*a+12*x*y*a2-12*x*y2*b-12*x*y*b2+4*x2*x*b+12*x2*b*a+12*x*b*a2-4*x*b2*b+4*a2*a*y-4*a*y2*y-12*a*y2*b-12*a*y*b2+4*a2*a*b-4*a*b2*b);
						
						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="23" name="4th False Quasi Perpendicular">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = -4 * Xr * Xi * (Xr2 - Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th False Quasi Perpendicular
			else if (m_nFractalType == 23){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;
						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func9
						double c = x2-y2;
						double d = -2*b*y+2*a*x-b2+a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = -(4*x*y)*Dni - (4*x*b + 4*a*y + 4*a*b)*_abs(-y2-2*b*y+x2+2*a*x-b2+a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="24" name="4th False Quasi Heart">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = 4 * Xr * Xi * (Xr2 - Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th False Quasi Heart
			else if (m_nFractalType == 24){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;
						//func2
						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 + a0;

						//func10
						double c = x2-y2;
						double d = -2*b*y+2*a*x-b2+a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = (4*x*y)*Dni + (4*x*b + 4*a*y + 4*a*b)*_abs(-y2-2*b*y+x2+2*a*x-b2+a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="25" name="4th Celtic False Quasi Perpendicular">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = -4 * Xr * Xi * (Xr2 - Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic False Quasi Perpendicular
			else if (m_nFractalType == 25){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;

						//func9
						c = x2-y2;
						d = -2*b*y+2*a*x-b2+a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = -(4*x*y)*Dni - (4*x*b + 4*a*y + 4*a*b)*_abs(-y2-2*b*y+x2+2*a*x-b2+a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="26" name="4th Celtic False Quasi HEart">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xr * Xi * (Xr2 - Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			// 4th Celtic False Quasi Heart
			else if (m_nFractalType == 26){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;
						//func5
						double c = x2*x2 + y2*y2 - 6*x2*y2;
						double d = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 + 4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2 - 12*a*x*y2-6*a2*y2-12*b*x2*y-24*a*b*x*y-12*a2*b*y-6*b2*x2-12*a*b2*x-6*a2*b2;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = Dnr + a0;
						//func10
						c = x2-y2;
						d = -2*b*y+2*a*x-b2+a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = (4*x*y)*Dni + (4*x*b + 4*a*y + 4*a*b)*_abs(-y2-2*b*y+x2+2*a*x-b2+a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="27" name="5th Burning Ship Partial">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2) +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Burning Ship Partial
			else if (m_nFractalType == 27){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func14
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = (Dnr) * (x2*x2- 10*x2*y2 + 5*y2*y2) + _abs(x+a) * (4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 -20*x2*y*b-10*x2*b2-20*x*a*y2-40*x*a*y*b-20*x*a*b2-10*a2*y2-20*a2*y*b-10*a2*b2 + 20*y2*y*b+30*y2*b2+20*y*b2*b+5*b2*b2) + a0;

						//func15
						Dni = 20*y*x2*x*a+30*y*x2*a2+20*y*x*a2*a+5*y*a2*a2-30*y2*x2*b-30*y*x2*b2-20*y2*y*x*a-60*y2*x*a*b-60*y*x*a*b2-10*y2*y*a2-30*y2*a2*b-30*y*a2*b2+5*y2*y2*b+10*y2*y*b2+10*y2*b2*b+5*y*b2*b2+5*b*x2*x2+20*b*x2*x*a+30*b*x2*a2+20*b*x*a2*a+5*b*a2*a2-10*b2*b*x2-20*b2*b*x*a-10*b2*b*a2+b2*b2*b + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="28" name="5th Burning Ship Partial Mbar">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = -Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2) +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Burning Ship Partial Mbar
			else if (m_nFractalType == 28){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func14
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = (Dnr) * (x2*x2- 10*x2*y2 + 5*y2*y2) + _abs(x+a) * (4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 -20*x2*y*b-10*x2*b2-20*x*a*y2-40*x*a*y*b-20*x*a*b2-10*a2*y2-20*a2*y*b-10*a2*b2 + 20*y2*y*b+30*y2*b2+20*y*b2*b+5*b2*b2) + a0;

						//func16
						Dni = b0 - (20*y*x2*x*a+30*y*x2*a2+20*y*x*a2*a+5*y*a2*a2-30*y2*x2*b-30*y*x2*b2-20*y2*y*x*a-60*y2*x*a*b-60*y*x*a*b2-10*y2*y*a2-30*y2*a2*b-30*y*a2*b2+5*y2*y2*b+10*y2*y*b2+10*y2*b2*b+5*y*b2*b2+5*b*x2*x2+20*b*x2*x*a+30*b*x2*a2+20*b*x*a2*a+5*b*a2*a2-10*b2*b*x2-20*b2*b*x*a-10*b2*b*a2+b2*b2*b);

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="29" name="5th Celtic Mbar">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = (Xr * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2)).Abs() +Cr;
        Xin = -Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2) +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Celtic Mbar
			else if (m_nFractalType == 29){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func17
						double c = 5*x*y2*y2-10*x2*x*y2+x2*x2*x;
						double d = 20*x*b*y2*y-30*x2*a*y2+30*x*b2*y2-30*x*a2*y2-20*x2*x*b*y-60*x2*a*b*y+20*x*b2*b*y-60*x*a2*b*y+5*x2*x2*a-10*x2*x*b2+10*x2*x*a2-30*x2*a*b2+10*x2*a2*a+5*x*b2*b2-30*x*a2*b2+5*x*a2*a2+5*a*y2*y2+20*a*b*y2*y+30*a*b2*y2-10*a2*a*y2+20*a*b2*b*y-20*a2*a*b*y+5*a*b2*b2-10*a2*a*b2+a2*a2*a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr+=a0;

						//func16
						Dni = b0 - (20*y*x2*x*a+30*y*x2*a2+20*y*x*a2*a+5*y*a2*a2-30*y2*x2*b-30*y*x2*b2-20*y2*y*x*a-60*y2*x*a*b-60*y*x*a*b2-10*y2*y*a2-30*y2*a2*b-30*y*a2*b2+5*y2*y2*b+10*y2*y*b2+10*y2*b2*b+5*y*b2*b2+5*b*x2*x2+20*b*x2*x*a+30*b*x2*a2+20*b*x*a2*a+5*b*a2*a2-10*b2*b*x2-20*b2*b*x*a-10*b2*b*a2+b2*b2*b);

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="30" name="5th Quasi Burning Ship (BS/Buffalo Hybrid)">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = -(Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2)).Abs() +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Quasi Burning Ship (BS/Buffalo Hybrid)
			else if (m_nFractalType == 30){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func14
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = (Dnr) * (x2*x2- 10*x2*y2 + 5*y2*y2) + _abs(x+a) * (4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 -20*x2*y*b-10*x2*b2-20*x*a*y2-40*x*a*y*b-20*x*a*b2-10*a2*y2-20*a2*y*b-10*a2*b2 + 20*y2*y*b+30*y2*b2+20*y*b2*b+5*b2*b2) + a0;

						//func18
						c = y2*y2*y-10*y2*y*x2+5*y*x2*x2;
						d = 5*y2*y2*b-20*y2*y*a*x+10*y2*y*b2-10*y2*y*a2-30*y2*b*x2-60*y2*a*b*x+10*y2*b2*b-30*y2*a2*b+20*y*a*x2*x-30*y*b2*x2+30*y*a2*x2-60*y*a*b2*x+20*y*a2*a*x+5*y*b2*b2-30*y*a2*b2+5*y*a2*a2+5*b*x2*x2+20*b*a*x2*x-10*b2*b*x2+30*b*a2*x2-20*b2*b*a*x+20*b*a2*a*x+b2*b2*b-10*b2*b*a2+5*b*a2*a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni=b0-Dni;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="31" name="5th Quasi Perpendicular">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = -Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2).Abs() +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Quasi Perpendicular
			else if (m_nFractalType == 31){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func14
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = (Dnr) * (x2*x2- 10*x2*y2 + 5*y2*y2) + _abs(x+a) * (4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 -20*x2*y*b-10*x2*b2-20*x*a*y2-40*x*a*y*b-20*x*a*b2-10*a2*y2-20*a2*y*b-10*a2*b2 + 20*y2*y*b+30*y2*b2+20*y*b2*b+5*b2*b2) + a0;

						//func19
						c = 5*x2*x2 - 10*x2*y2 + y2*y2;
						d = 4*b*y2*y-20*a*x*y2+6*b2*y2-10*a2*y2-20*b*x2*y-40*a*b*x*y+4*b2*b*y-20*a2*b*y+20*a*x2*x-10*b2*x2+30*a2*x2-20*a*b2*x+20*a2*a*x+b2*b2-10*a2*b2+5*a2*a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = -y * Dni - b * _abs(y2*y2+4*b*y2*y-10*x2*y2-20*a*x*y2+6*b2*y2-10*a2*y2-20*b*x2*y-40*a*b*x*y+4*b2*b*y-20*a2*b*y+5*x2*x2+20*a*x2*x-10*b2*x2+30*a2*x2-20*a*b2*x+20*a2*a*x+b2*b2-10*a2*b2+5*a2*a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="32" name="5th Quasi Heart">
    <formula glitch="0.00001">
      <reference t="R">
        Xrn = Xr.Abs() * (Xr2*Xr2 - 10 * Xr2*Xi2 + 5 * Xi2*Xi2) +Cr;
        Xin = Xi * (5 * Xr2*Xr2 - 10 * Xr2*Xi2 + Xi2*Xi2).Abs() +Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//5th Quasi Heart
			else if (m_nFractalType == 32){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//func14
						double c = x;
						double d = a;
						if (c>0){
							if (c + d>0)
								Dnr = d;
							else if (d == -c)
								Dnr = d;
							else if (d<-c)
								Dnr = -d - 2 * c;
						}
						else if (c == 0)
							Dnr = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dnr = d + 2 * c;
							else if (d == -c)
								Dnr = -d;
							else if (d < -c)
								Dnr = -d;
						}
						Dnr = (Dnr) * (x2*x2- 10*x2*y2 + 5*y2*y2) + _abs(x+a) * (4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2 -20*x2*y*b-10*x2*b2-20*x*a*y2-40*x*a*y*b-20*x*a*b2-10*a2*y2-20*a2*y*b-10*a2*b2 + 20*y2*y*b+30*y2*b2+20*y*b2*b+5*b2*b2) + a0;

						//func19
						c = 5*x2*x2 - 10*x2*y2 + y2*y2;
						d = 4*b*y2*y-20*a*x*y2+6*b2*y2-10*a2*y2-20*b*x2*y-40*a*b*x*y+4*b2*b*y-20*a2*b*y+20*a*x2*x-10*b2*x2+30*a2*x2-20*a*b2*x+20*a2*a*x+b2*b2-10*a2*b2+5*a2*a2;
						if (c>0){
							if (c + d>0)
								Dni = d;
							else if (d == -c)
								Dni = d;
							else if (d<-c)
								Dni = -d - 2 * c;
						}
						else if (c == 0)
							Dni = _abs(d);
						else if (c < 0){
							if (c + d>0)
								Dni = d + 2 * c;
							else if (d == -c)
								Dni = -d;
							else if (d < -c)
								Dni = -d;
						}
						Dni = y * Dni + b * _abs(y2*y2+4*b*y2*y-10*x2*y2-20*a*x*y2+6*b2*y2-10*a2*y2-20*b*x2*y-40*a*b*x*y+4*b2*b*y-20*a2*b*y+5*x2*x2+20*a*x2*x-10*b2*x2+30*a2*x2-20*a*b2*x+20*a2*a*x+b2*b2-10*a2*b2+5*a2*a2) + b0;

						Di = Dni;
						Dr = Dnr;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="33" name="SimonBrot 4th">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = Xi2*Xi2.Abs()-4*Xi*(Xr*Xi).Abs()*Xr-Xr2*Xi2.Abs()-Xi2*Xr2.Abs()+Xr2*Xr2.Abs() + Cr;
        Xin = - 2*Xr*Xi*Xi2.Abs()-2*Xi2*(Xr*Xi).Abs()+2*Xr2*(Xr*Xi).Abs()+2*Xr*Xi*Xr2.Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//FT_Simon100A_plain
			else if (m_nFractalType == 33){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;


						//Dnr = b*b*abs(b*b)-4*b*abs(a*b)*a-a*a*abs(b*b)-b*b*abs(a*a)+a*a*abs(a*a) + a0;
						//Dni = - 2*a*b*abs(b*b)-2*b*b*abs(a*b)+2*a*a*abs(a*b)+2*a*b*abs(a*a) + b0;

						Dnr = (y2)*lb_abs_db(y2,2*b*y+b2)-4*y*x*lb_abs_db(x*y,x*b+a*y+a*b)-x2*lb_abs_db(y2,2*b*y+b2)-y2*lb_abs_db(x2,2*x*a+a2)+x2*lb_abs_db(x2,2*x*a+a2) 
							+ (2*b*y+b2)*abs(y2+2*b*y+b2)-4*(y*a+b*x+b*a)*abs(x*y+x*b+a*y+a*b)-(2*x*a+a2)*abs(y2+2*b*y+b2)-(2*b*y+b2)*abs(x2+2*x*a+a2)+(2*x*a+a2)*abs(x2+2*x*a+a2) + a0;


						Dni = 2*x2*lb_abs_db(x*y,x*b+a*y+a*b)+2*x*y*lb_abs_db(x2,2*x*a+a2)-2*x*y*lb_abs_db(y2,2*b*y+b2)-2*y2*lb_abs_db(x*y,x*b+a*y+a*b) 
							+ 2*(2*x*a+a2)*abs(x*y+x*b+a*y+a*b) +2*(x*b+a*y+a*b)*abs(x2+2*x*a+a2)-2*(x*b+a*y+a*b)*abs(y2+2*b*y+b2)-2*(2*b*y+b2)*abs(x*y+x*b+a*y+a*b)  + b0;

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="34" name="4th Imag Quasi Perpendicular / Heart">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = 4 * Xr * (Xi*Xr2 - Xi*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Imag Quasi Perpendicular / Heart
			else if (m_nFractalType == 34){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 +a0;
						Dni = 4 * (a) * abs(- y2*y-3*b*y2+x2*y+2*a*x*y-3*b2*y+a2*y+b*x2+2*a*b*x-b2*b+a2*b) + 4 * x * lb_abs_db(- y2*y+x2*y,-3*b*y2+2*a*x*y-3*b2*y+a2*y+b*x2+2*a*b*x-b2*b+a2*b) + b0;	//func21

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="35" name="4th Real Quasi Perpendicular">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = -4 * Xi * (Xr*Xr2 - Xr*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Real Quasi Perpendicular
			else if (m_nFractalType == 35){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 +a0;
						Dni = -4*y*lb_abs_db(x2*x-x*y2,-a*y2-2*b*x*y-2*a*b*y+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) - 4*b*abs(- x*y2-a*y2-2*b*x*y-2*a*b*y+x2*x+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + b0;	//func22

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="36" name="4th Real Quasi Heart">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2 +Cr;
        Xin = 4 * Xi * (Xr*Xr2 - Xr*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Real Quasi Heart
			else if (m_nFractalType == 36){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = 4*x2*x*a+6*x2*a2+4*x*a2*a+a2*a2+4*y2*y*b+6*y2*b2+4*y*b2*b+b2*b2-12*x2*y*b-6*x2*b2-12*x*a*y2-24*x*a*y*b-12*x*a*b2-6*a2*y2-12*a2*y*b-6*a2*b2 +a0;
						Dni = 4*y*lb_abs_db(x2*x-x*y2,-a*y2-2*b*x*y-2*a*b*y+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + 4*b*abs(- x*y2-a*y2-2*b*x*y-2*a*b*y+x2*x+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + b0;	//func22

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="37" name="4th Celtic Imag Quasi Perpendicular / Heart">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xr * (Xi*Xr2 - Xi*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Celtic Imag Quasi Perpendicular / Heart
			else if (m_nFractalType == 37){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = lb_abs_db(x2*x2 + y2*y2 - 6*x2*y2,4*y2*y*b-12*y2*a*x+6*y2*b2-6*y2*a2-12*x2*y*b-24*x*y*a*b+4*b2*b*y-12*b*y*a2+4*x2*x*a-6*x2*b2+6*x2*a2-12*b2*x*a+4*a2*a*x+b2*b2-6*b2*a2+a2*a2) +a0;
						Dni = 4 * a * abs(- y2*y-3*b*y2+x2*y+2*a*x*y-3*b2*y+a2*y+b*x2+2*a*b*x-b2*b+a2*b) + 4 * x * lb_abs_db(- y2*y+x2*y,-3*b*y2+2*a*x*y-3*b2*y+a2*y+b*x2+2*a*b*x-b2*b+a2*b) + b0;	//func21

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="38" name="4th Celtic Real Quasi Perpendicular">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = -4 * Xi * (Xr*Xr2 - Xr*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Celtic Real Quasi Perpendicular
			else if (m_nFractalType == 38){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = lb_abs_db(x2*x2 + y2*y2 - 6*x2*y2,4*y2*y*b-12*y2*a*x+6*y2*b2-6*y2*a2-12*x2*y*b-24*x*y*a*b+4*b2*b*y-12*b*y*a2+4*x2*x*a-6*x2*b2+6*x2*a2-12*b2*x*a+4*a2*a*x+b2*b2-6*b2*a2+a2*a2) +a0;
						Dni = -4*y*lb_abs_db(x2*x-x*y2,-a*y2-2*b*x*y-2*a*b*y+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) - 4*b*abs(- x*y2-a*y2-2*b*x*y-2*a*b*y+x2*x+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + b0;	//func22

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="39" name="4th Celtic Real Quasi Heart">
    <formula glitch="0.000001">
      <reference t="R">
        Xrn = (Xr2 * Xr2 + Xi2 * Xi2 - 6 * Xr2 * Xi2).Abs() +Cr;
        Xin = 4 * Xi * (Xr*Xr2 - Xr*Xi2).Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//4th Celtic Real Quasi Heart
			else if (m_nFractalType == 39){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = lb_abs_db(x2*x2 + y2*y2 - 6*x2*y2,4*y2*y*b-12*y2*a*x+6*y2*b2-6*y2*a2-12*x2*y*b-24*x*y*a*b+4*b2*b*y-12*b*y*a2+4*x2*x*a-6*x2*b2+6*x2*a2-12*b2*x*a+4*a2*a*x+b2*b2-6*b2*a2+a2*a2) +a0;
						Dni = 4*y*lb_abs_db(x2*x-x*y2,-a*y2-2*b*x*y-2*a*b*y+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + 4*b*abs(- x*y2-a*y2-2*b*x*y-2*a*b*y+x2*x+3*a*x2-b2*x+3*a2*x-a*b2+a2*a) + b0;	//func22

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="40" name="SimonBrot 6th">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = 3*(Xr2*Xi).Abs()*Xi2*Xi-(Xi2*Xi).Abs()*Xi2*Xi+9*(Xr*Xi2).Abs()*Xr*Xi2-3*(Xr2*Xr).Abs()*Xr*Xi2+3*(Xi2*Xi).Abs()*Xr2*Xi-9*(Xr2*Xi).Abs()*Xr2*Xi-3*(Xr*Xi2).Abs()*Xr2*Xr+(Xr2*Xr).Abs()*Xr2*Xr +Cr;
        Xin = 3*Xi2*Xi*(Xr*Xi2).Abs()-(Xr2*Xr).Abs()*Xi2*Xi-9*(Xr2*Xi).Abs()*Xi2*Xr-9*(Xr*Xi2).Abs()*Xi*Xr2+3*(Xr2*Xr).Abs()*Xi*Xr2+3*(Xi2*Xi).Abs()*Xr*Xi2-(Xi2*Xi).Abs()*Xr2*Xr+3*(Xi*Xr2).Abs()*Xr2*Xr + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			//Cubic FT_Simon100A_plain
			else if (m_nFractalType == 40){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						Dnr= 3*lb_abs_db(x2*y,x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(y2*y) - lb_abs_db(y2*y,3*y2*b+3*y*b2+b2*b)*(y2*y) + 9*lb_abs_db(x*y2,2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(x*y2) - 3*lb_abs_db(x2*x,3*x2*a+3*x*a2+a2*a)*(x*y2) + 3*lb_abs_db(y2*y,3*y2*b+3*y*b2+b2*b)*(x2*y) - 9*lb_abs_db(x2*y,x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(x2*y) - 3*lb_abs_db(x*y2,2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(x2*x) + lb_abs_db(x2*x,3*x2*a+3*x*a2+a2*a)*(x2*x)
							+ 3*abs(x2*y+x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(3*y2*b+3*y*b2+b2*b) - abs(y2*y+3*y2*b+3*y*b2+b2*b)*(3*y2*b+3*y*b2+b2*b) + 9*abs(x*y2+2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2) - 3*abs(x2*x+3*x2*a+3*x*a2+a2*a)*(2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2) + 3*abs(y2*y+3*y2*b+3*y*b2+b2*b)*(x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b) - 9*abs(x2*y+x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b) - 3*abs(x*y2+2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(3*x2*a+3*x*a2+a2*a) + abs(x2*x+3*x2*a+3*x*a2+a2*a)*(3*x2*a+3*x*a2+a2*a)
							+ a0;
						Dni= 3*lb_abs_db(x*y2,2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(y2*y) - lb_abs_db(x2*x,3*x2*a+3*x*a2+a2*a)*(y2*y) - 9*lb_abs_db(x2*y,x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(x*y2) - 9*lb_abs_db(x*y2,2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(x2*y) + 3*lb_abs_db(x2*x,3*x2*a+3*x*a2+a2*a)*(x2*y) + 3*lb_abs_db(y2*y,3*y2*b+3*y*b2+b2*b)*(x*y2) - lb_abs_db(y2*y,3*y2*b+3*y*b2+b2*b)*(x2*x) + 3*lb_abs_db(x2*y,x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(x2*x)
							+ 3*abs(x*y2+2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(3*y2*b+3*y*b2+b2*b) - abs(x2*x+3*x2*a+3*x*a2+a2*a)*(3*y2*b+3*y*b2+b2*b) - 9*abs(x2*y+x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2) - 9*abs(x*y2+2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2)*(x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b) + 3*abs(x2*x+3*x2*a+3*x*a2+a2*a)*(x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b) + 3*abs(y2*y+3*y2*b+3*y*b2+b2*b)*(2*x*y*b+x*b2+a*y2+2*a*y*b+a*b2) - abs(y2*y+3*y2*b+3*y*b2+b2*b)*(3*x2*a+3*x*a2+a2*a) + 3*abs(x2*y+x2*b+2*x*a*y+2*x*a*b+a2*y+a2*b)*(3*x2*a+3*x*a2+a2*a)
							+ b0;

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="41" name="HPDZ Buffalo">
    <formula glitch="0.0001">
      <reference t="R">
        Xrn = (Xr2 - Xi2) - Xr.Abs() +Cr;
        Xin = (Xr * Xi).Abs() * 2.0 - Xi.Abs() + Ci;
      </reference>
      <perturbation t="R">
assert(!"implemented");
<!--
			else if (m_nFractalType == 41){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double a2 = a*a;
						double b2 = b*b;

						Dnr = a*(2*x+a)-b*(b+2*y) - lb_abs_db(x,a) + a0;
						Dni = lb_abs_db(x*y,x*b+a*y+a*b) * 2.0 - lb_abs_db(y,b) + b0;

						Dr=Dnr;
						Di=Dni;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="42" name="TheRedshiftRider 1: a*z^2+z^3+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = A * (X^2) + (X^3) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 42){
				complex<double> _2(2,0),_3(3,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)+_3*z*z*d+_3*z*d2+d2*d + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="43" name="TheRedshiftRider 2: a*z^2-z^3+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = A * (X^2) - (X^3) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 43){
				complex<double> _2(2,0),_3(3,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)-_3*z*z*d-_3*z*d2-d2*d + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="44" name="TheRedshiftRider 3: 2*z^2-z^3+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = 2 * (X^2) - (X^3) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 44){
				complex<double> _2(2,0),_3(3,0),a(2,0);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)-_3*z*z*d-_3*z*d2-d2*d + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="45" name="TheRedshiftRider 4: a*z^2+z^4+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = A * (X^2) + (X^4) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 45){
				complex<double> _2(2,0),_4(4,0),_6(6,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)+_4*(z^3)*d+_6*(z^2)*d2+_4*z*(d2*d)+(d2^2) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="46" name="TheRedshiftRider 5: a*z^2-z^4+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = A * (X^2) - (X^4) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 46){
				complex<double> _2(2,0),_4(4,0),_6(6,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)-_4*(z^3)*d-_6*(z^2)*d2-_4*z*d2*d-(d2^2) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="47" name="TheRedshiftRider 6: a*z^2+z^5+c">
    <formula glitch="0.0001">
      <reference t="C">
        Xn = A * (X^2) + (X^5) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 47){
				complex<double> _2(2,0),_5(5,0),_10(10,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)+_5*(z^4)*d+_10*(z^3)*d2+_10*(z^2)*d2*d+_5*z*(d2^2)+(d2*d2*d) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="48" name="TheRedshiftRider 7: a*z^2-z^5+c">
    <formula glitch="0.0001">
      <reference t="C">
  			Xn = A * (X^2) - (X^5) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 48){
				complex<double> _2(2,0),_5(5,0),_10(10,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)-_5*(z^4)*d-_10*(z^3)*d2-_10*(z^2)*d2*d-_5*z*(d2^2)-(d2*d2*d) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="49" name="TheRedshiftRider 8: a*z^2+z^6+c">
    <formula glitch="0.0001">
      <reference t="C">
			  Xn = A * (X^2) + (X^6) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 49){
				complex<double> _2(2,0),_6(6,0),_15(15,0),_20(20,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d2=d*d;
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+d2)+_6*(z^5)*d+_15*(z^4)*d2+_20*(z^3)*(d2*d)+_15*(z^2)*(d2^2)+_6*z*(d2*d2*d)+(d2^3) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="50" name="TheRedshiftRider 9: a*z^2-z^6+c">
    <formula glitch="0.0001">
      <reference t="C">
			  Xn = A * (X^2) - (X^6) + C;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 50){
				complex<double> _2(2,0),_6(6,0),_15(15,0),_20(20,0);
				complex<double> a(g_FactorAR,g_FactorAI);
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];

						complex<double> z(x,y);
						complex<double> d(Dr,Di);
						complex<double> d0(dbD0r,dbD0i);
						d = a*(_2*z*d+(d^2))-_6*(z^5)*d-_15*(z^4)*(d^2)-_20*(z^3)*(d^3)-_15*(z^2)*(d^4)-_6*z*(d^5)-(d^6) + d0;

						Dr=d.m_r;
						Di=d.m_i;
					}
				}
			}
-->
      </perturbation>
    </formula>
  </group>

  <group type="51" name="SimonBrot2 4th">
    <formula glitch="0.0001">
      <reference t="C">
        Xrn = (Xr2-Xi2)*(Xr2-Xi2).Abs() - 2*Xr*Xi*(2*Xr*Xi).Abs() + Cr;
        Xin = (Xr2-Xi2)*(2*Xr*Xi).Abs() + 2*Xr*Xi*(Xr2-Xi2).Abs() + Ci;
      </reference>
      <perturbation t="C">
assert(!"implemented");
<!--
			else if (m_nFractalType == 51){
				if (antal<nMaxIter && test1 <= m_nBailout2){
					for (; antal<nMaxIter && test1 <= m_nBailout2; antal++){
						yr = m_db_dxr[antal] + Dr;
						yi = m_db_dxi[antal] + Di;
						test2 = test1;
						test1 = g_real*yr*yr + g_imag*yi*yi;
						if (test1<m_db_z[antal]){
							if (!m_bNoGlitchDetection)
								test1 = m_nBailout2 * 2;
							bGlitch = TRUE;
						}
						double &x = m_db_dxr[antal];
						double &y = m_db_dxi[antal];
						double &a = Dr;
						double &b = Di;
						double &a0 = dbD0r;
						double &b0 = dbD0i;
						double x2 = x*x;
						double y2 = y*y;
						double a2 = a*a;
						double b2 = b*b;

						//d = (z*z)*(z*z+_2*z*d+d*d).abs() + (_2*z*d+d*d)*(z*z+_2*z*d+d*d).abs() - (z*z)*(z*z).abs() + d0;
						//Dr=d.m_r;
						//Di=d.m_i;
						Dnr=(x2-y2)*lb_abs_db(x2-y2,+2*x*a+a2-2*y*b-b2) + (2*x*a+a2-2*y*b-b2)*abs(x2+2*x*a+a2-y2-2*y*b-b2) 
							- (2*x*y)*lb_abs_db(2*x*y,2*x*b+2*a*y+2*a*b) - (2*x*b+2*a*y+2*a*b)*abs(2*x*y+2*x*b+2*a*y+2*a*b)
							+ a0;
						Dni=(x2-y2)*lb_abs_db(2*x*y,2*x*b+2*a*y+2*a*b) + (2*x*a+a2-2*y*b-b2)*abs(2*x*y+2*x*b+2*a*y+2*a*b) 
							+ (2*x*y)*lb_abs_db(x2-y2,2*x*a+a2-2*y*b-b2) + (2*x*b+2*a*y+2*a*b)*abs(x2-y2+2*x*a+a2-2*y*b-b2) 
							+ b0;
						Dr=Dnr;
						Di=Dni;
					}
				}
			}
			else
			{
-->
      </perturbation>
    </formula>
  </group>

</formulas>
